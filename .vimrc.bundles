" Vundle {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Language
Plugin 'Syntastic'                      " Syntax checker
Plugin 'StanAngeloff/php.vim'           " PHP
Plugin 'yeripratama/vim-volt-syntax'    " Phalcon's Volt
Plugin 'pangloss/vim-javascript'        " Javascript
Plugin 'evidens/vim-twig'               " Twig

Plugin 'captbaritone/better-indent-support-for-php-with-html'

" Editing
Plugin 'The-NERD-Commenter'             " Commenter `<leader>c<space>`
Plugin 'ervandew/supertab'              " Auto complete <tab>
Plugin 'delimitMate.vim'                " Auto add matching [({''})]
Plugin 'mattn/emmet-vim'                " Emmet for vim `<c-y>,`
Plugin 'MatchTag'                       " Highlight matching html tag
Plugin 'surround.vim'                   " Surrounder `cs*`
Plugin 'Tabular'                        " Aligning tool :Tabular /{pattern}
Plugin 'NrrwRgn'                        " Separate selected text and edit it to new window :NR

" Completion
" Determinte snippet engine
if has('python')
    " use UltiSnips
    Plugin 'SirVer/ultisnips'           " Snippet Engine
else
    " SnipMate {{{
    " Require:
    Plugin 'MarcWeber/vim-addon-mw-utils' 
    Plugin 'tomtom/tlib_vim'              

    Plugin 'garbas/vim-snipmate'        " Snippet Engine
    " }}}
endif

Plugin 'shawncplus/phpcomplete.vim'     " PHP omnicompletion
Plugin 'honza/vim-snippets'             " Snippets files

" UI
Plugin 'ap/vim-buftabline'              " Buffer name on top of screen
Plugin 'flazz/vim-colorschemes'         " All colorscheme
Plugin 'junegunn/goyo.vim'              " Distraction free

" Navigation
Plugin 'BufOnly.vim'                    " Close all buffer but this one. :Bufonly
Plugin 'ctrlpvim/ctrlp.vim'             " File searcher <c-p>
Plugin 'EasyMotion'                     " Jumping over places <leader><leader>w
Plugin 'The-NERD-tree'                  " File browser <leader>d
Plugin 'Tagbar'                         " List tags in sidebar
Plugin 'chrismccord/bclose.vim'         " Close a buffer without closing split window

" Git
Plugin 'fugitive.vim'                   " Git wrapper
Plugin 'airblade/vim-gitgutter'         " Git changes sign
Plugin 'Xuyuanp/nerdtree-git-plugin'    " Git status within nerdtree

" Angular {{{
" Require:
" a snippet engine
" pangloss/vim-javascript
" othree/javascript-libraries-syntax.vim
" matthewsimo/angular-vim-snippets
" claco/jasmine.vim
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'matthewsimo/angular-vim-snippets' " Angular snippets
Plugin 'claco/jasmine.vim'                " Jasmine JS
Plugin 'burnettk/vim-angular'             " Angular
" end of Angular }}}

" Experimental
Plugin 'Olical/vim-enmasse'               " Edit every file in a quickfix list at the same time

" Fancy
" Plugin 'mhinz/vim-startify'             " Fancy start screen
" Plugin 'bling/vim-airline'              " Statusline
" Plugin 'vim-airline/vim-airline-themes' " Themes for airline plugin
" Plugin 'edkolev/tmuxline.vim'           " Statusline for tmux
" Plugin 'ryanoasis/vim-devicons'         " Fancy icons, require patched font (nerd font)

" Temporarily disabled plugins
" Plugin 'vim-utils/vim-man'              " View other program's manual page in vim :Man
" Plugin 'textutil.vim'                   " Open rtf, doc, rtfd, wordml as plain text (Mac only)
" Plugin 'EasyGrep'                       " Easy find and replace
" Plugin 'terryma/vim-expand-region'      " Select region
" Plugin 'itchyny/calendar.vim'           " Calendar app
" Plugin 'vitalk/vim-simple-todo'         " Simple todo app

if executable('ag')
    " Seriously, use The Silver Searcher https://github.com/ggreer/the_silver_searcher
    Plugin 'rking/ag.vim'
else
    if executable('ack') || executable('ack-grep')
        Plugin 'ack.vim'           " Better than grep, they said http://beyondgrep.com
        Plugin 'NERD_Tree-and-ack' " Find in folder, from nerdtree
    endif

endif


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" }}}

" Plugin Settings {{{
"
" PHP.vim {{{

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" }}}

" Js Lib (javascript-libraries-syntax.vim) {{{
let g:used_javascript_libs = 'jquery,underscore,angularjs,angularui,angularuirouter'
" }}}

" Supertab {{{
" set default action to keyword completion
let g:SuperTabDefaultCompletionType = '<c-p>'
let g:SuperTabRetainCompletionDuration = 'session'
let g:SuperTabCrMapping = 1
autocmd FileType *
\ if &omnifunc != '' |
\   call SuperTabChain(&omnifunc, "<c-p>") |
\ endif
" }}}

" Buftabline {{{
let g:buftabline_indicators = 1
" }}}

" Syntastic {{{

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

nnoremap <leader><leader>s :SyntasticToggleMode<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" }}}

" Angular & Ionic syntastic ignore {{{

let g:syntastic_html_tidy_ignore_errors=["<ion-", "discarding unexpected </ion-",  'proprietary attribute "ng-', 'proprietary attribute "ng-']

" }}}

" Bclose {{{

nnoremap <leader>x :Bclose<CR>

" }}}

" Tagbar {{{

nnoremap <leader>t :TagbarToggle<CR>

" }}}

" Fugitive {{{
"set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" }}}

" Git Gutter {{{

let g:gitgutter_realtime = 0 " disable realtime update, in hope vim doesn't lag
let g:gitgutter_eager = 0
let g:gitgutter_max_signs = 250
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>G :GitGutterLineHighlightsToggle<CR>
" hunk stage = <leader>hs
" hunk revert stage (unstage) = <leader>hr

" }}}

" Vim Airline & Tmuxline {{{
"let g:airline#extensions#tabline#enabled =1 " enable tabline
"let g:airline#extensions#tabline#fnamemod = ':t' " show only the file name

" User patched font to display icons
"let g:airline_powerline_fonts = 1 

" If you don't have patched font installed, 
" I recommend using this setting for nice & simple appearance
"let g:airline_left_sep = ''
"let g:airline_right_sep = ''

" Tmuxline
"let g:tmuxline_powerline_separators = 1
"let g:airline#extensions#tmuxline#enabled = 0 " Use custom theme for tmuxline
"let g:tmuxline_theme = 'airline'
"let g:tmuxline_preset = 'full'

" }}}

" NERDTree {{{

nnoremap <silent> <leader>d :NERDTreeToggle<CR>
nnoremap <silent> <leader>D :NERDTreeFind<CR>
let NERDTreeShowHidden=1
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeStatusline = "FILES"

" }}}

" Emmet {{{
"
" }}}

" Surround {{{
"
" cs"'
" cs'<q>
" cst"
" ds"
" S<p class="something">
"
" }}}

" CtrlP {{{
"
" No need to reindex files when reopen CtrlP.
" to refresh search list, use <F5>
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_show_hidden = 1

if executable('ag')
  "let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = "ag --hidden --nocolor --ignore .git -l -g '' %s"
endif

" Status Line: {{{
" Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
"            a:1    a:2      a:3       a:4  a:5   a:6  a:7
fu! CtrlP_main_status(...)
  let regex = a:3 ? '%2*regex %*' : ''
  let prv = '%#StatusLineNC# '.a:4.' %*'
  let item = ' ' . (a:5 == 'mru files' ? 'mru' : a:5) . ' '
  let nxt = '%#StatusLineNC# '.a:6.' %*'
  let byfname = '%2* '.a:2.' %*'
  let dir = '%#SLBranch# ← %*%#StatusLineNC#' . fnamemodify(getcwd(), ':~') . '%* '

  " only outputs current mode
  retu ' %#SLArrows#»%*' . item . '%#SLArrows#«%* ' . '%=%<' . dir

  " outputs previous/next modes as well
  " retu prv . '%4*»%*' . item . '%4*«%*' . nxt . '%=%<' . dir
endf
 
" Argument: len
"           a:1
fu! CtrlP_progress_status(...)
  let len = '%#Function# '.a:1.' %*'
  let dir = ' %=%<%#LineNr# '.getcwd().' %*'
  retu len.dir
endf

hi CtrlP_Purple  ctermfg=255 guifg=#ffffff  ctermbg=54  guibg=#5f5faf
hi CtrlP_IPurple ctermfg=54  guifg=#5f5faf  ctermbg=255 guibg=#ffffff
hi CtrlP_Violet  ctermfg=54  guifg=#5f5faf  ctermbg=104 guibg=#aeaed7

let g:ctrlp_status_func = {
  \ 'main': 'CtrlP_main_status',
  \ 'prog': 'CtrlP_progress_status'
  \}
" }}}

" }}}
" }}}
