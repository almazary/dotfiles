" Vundle {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Language & Syntax
Plugin 'scrooloose/syntastic'           " Syntax checker
Plugin 'StanAngeloff/php.vim'           " PHP
Plugin 'yeripratama/vim-volt-syntax'    " Phalcon's Volt
Plugin 'pangloss/vim-javascript'        " Javascript
Plugin 'evidens/vim-twig'               " Twig
Plugin 'jwalton512/vim-blade'           " Laravel's Blade
Plugin 'vim-scripts/smarty-syntax'      " Smarty template engine
Plugin 'leafgarland/typescript-vim'     " Typescript
Plugin 'captbaritone/better-indent-support-for-php-with-html'

" Editing
Plugin 'The-NERD-Commenter' " Commenter `<leader>c<space>`
Plugin 'delimitMate.vim'    " Auto add matching [({''})]
Plugin 'mattn/emmet-vim'    " Emmet for vim `<c-y>,`
Plugin 'MatchTag'           " Highlight matching html tag
Plugin 'tpope/vim-surround' " Surrounder `cs*`
Plugin 'Tabular'            " Aligning tool :Tabular /{pattern}
Plugin 'NrrwRgn'            " edit selected text to a new window
Plugin 'Olical/vim-enmasse' " Edit all files in the quickfix list
Plugin 'editorconfig/editorconfig-vim' " Editor config
Plugin 'tpope/vim-repeat'   " Repeat last plugin command
"Plugin 'ervandew/supertab'  " Auto complete <tab>


" Completion
" Determinte snippet engine
"if has('python')
    " use UltiSnips
    "Plugin 'SirVer/ultisnips'             " Snippet Engine
"else
    "Plugin 'MarcWeber/vim-addon-mw-utils' " required by snipmate
    "Plugin 'tomtom/tlib_vim'              " required by snipmate
    "Plugin 'garbas/vim-snipmate'          " Snippet Engine
"endif

"Plugin 'shawncplus/phpcomplete.vim'     " PHP omnicompletion
"Plugin 'honza/vim-snippets'             " Snippets files

" UI
"Plugin 'ap/vim-buftabline'              " Buffer name on top of screen
Plugin 'flazz/vim-colorschemes'         " All colorscheme
Plugin 'junegunn/goyo.vim'              " Distraction free
Plugin 'junegunn/limelight.vim'         " Distraction free

" Navigation
Plugin 'BufOnly.vim'                    " Close all buffer but current one.
Plugin 'ctrlpvim/ctrlp.vim'             " File fuzzy finder <c-p>
Plugin 'EasyMotion'                     " Jumping over places <leader><leader>w
Plugin 'The-NERD-tree'                  " File browser <leader>d
Plugin 'Tagbar'                         " List tags in sidebar
Plugin 'chrismccord/bclose.vim'         " Close a buffer without closing split window
Plugin 'tpope/vim-unimpaired'           " pairs of handy bracket mappings
Plugin 'mhinz/vim-grepper'              " Searching tool

" Git
Plugin 'fugitive.vim'                   " Git wrapper
Plugin 'airblade/vim-gitgutter'         " Git changes sign
"Plugin 'Xuyuanp/nerdtree-git-plugin'    " Git status within nerdtree

" Angular {{{
" Require:
" claco/jasmine.vim
Plugin 'othree/javascript-libraries-syntax.vim'
"Plugin 'matthewsimo/angular-vim-snippets'       " Angular snippets
Plugin 'claco/jasmine.vim'                      " Jasmine JS
Plugin 'burnettk/vim-angular'                   " Angular
" end of Angular }}}

" Shell Integration
Plugin 'tpope/vim-dispatch'

" Fancy stuff
" Plugin 'mhinz/vim-startify'             " Fancy start screen
" Plugin 'edkolev/tmuxline.vim'           " Statusline for tmux

" Temporarily disabled plugins
" Plugin 'vim-utils/vim-man'              " View other program's manual page in vim :Man
" Plugin 'textutil.vim'                   " Open rtf, doc, rtfd, wordml as plain text (Mac only)
" Plugin 'EasyGrep'                       " Easy find and replace
" Plugin 'terryma/vim-expand-region'      " Select region
" Plugin 'itchyny/calendar.vim'           " Calendar app
" Plugin 'vitalk/vim-simple-todo'         " Simple todo app

" More functionality on Macvim or gvim
if has('gui_macvim')
  Plugin 'bling/vim-airline'              " Statusline
  Plugin 'vim-airline/vim-airline-themes' " Themes for airline plugin
  "Plugin 'ryanoasis/vim-devicons'         " Fancy icons, require patched font (nerd font)
endif

if executable('ag')
    " Seriously, use The Silver Searcher https://github.com/ggreer/the_silver_searcher
    Plugin 'rking/ag.vim'
else
    if executable('ack') || executable('ack-grep')
        Plugin 'ack.vim'           " Better than grep, they said http://beyondgrep.com
        Plugin 'NERD_Tree-and-ack' " Find in folder, from nerdtree
    endif

endif


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
"
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" }}}

" Plugin Settings {{{
"
" PHP.vim {{{

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" }}}

" Goyo - Limelight {{{
set showcmd

function! GoyoEnterHandler()
    Limelight
    set wrap
endfunction

function! GoyoLeaveHandler()
    Limelight!
    set nowrap
endfunction

autocmd! User GoyoEnter call GoyoEnterHandler()
autocmd! User GoyoLeave call GoyoLeaveHandler()

" Color name (:help cterm-colors) or ANSI code
"let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_default_coefficient = 0.8

if has('gui_running')
    " Color name (:help gui-colors) or RGB color
    "let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'

endif
" }}}

" Js Lib (javascript-libraries-syntax.vim) {{{
let g:used_javascript_libs = 'jquery,underscore,angularjs,angularui,angularuirouter'
" }}}

"" Supertab {{{
"" set default action to keyword completion
"let g:SuperTabDefaultCompletionType = '<c-p>'
"let g:SuperTabRetainCompletionDuration = 'session'
"let g:SuperTabCrMapping = 1
"autocmd FileType *
"\ if &omnifunc != '' |
"\   call SuperTabChain(&omnifunc, "<c-p>") |
"\ endif
"" }}}

" Buftabline {{{
let g:buftabline_indicators = 1
" }}}

" Syntastic {{{

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

nnoremap <leader><leader>s :SyntasticToggleMode<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" }}}

" Angular & Ionic syntastic ignore {{{

let g:syntastic_html_tidy_ignore_errors=["<angucomplete-", "<ion-", "discarding unexpected </ion-", " proprietary attribute \"ng-", " proprietary attribute \"ui-sref", " proprietary attribute \"max-selected-items", " proprietary attribute \"ion-autocomplete", " proprietary attribute \"nav-direction"]

" }}}

" Bclose {{{

nnoremap <leader>x :Bclose<CR>

" }}}

" Tagbar {{{

nnoremap <leader>t :TagbarToggle<CR>

" }}}

" Fugitive {{{
set statusline=%<%t\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" }}}

" Git Gutter {{{

let g:gitgutter_realtime = 0 " disable realtime update, in hope vim doesn't lag
let g:gitgutter_eager = 0
let g:gitgutter_max_signs = 250
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>G :GitGutterLineHighlightsToggle<CR>
" hunk stage = <leader>hs
" hunk revert stage (unstage) = <leader>hr

" }}}

if has('gui_macvim')
    " Vim Airline & Tmuxline {{{
    let g:airline#extensions#tabline#enabled =1 " enable tabline
    let g:airline#extensions#tabline#fnamemod = ':t' " show only the file name

    " User patched font to display icons
    "let g:airline_powerline_fonts = 1

    " If you don't have patched font installed,
    " I recommend using this setting for nice & simple appearance
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''

    " Tmuxline
    "let g:tmuxline_powerline_separators = 1
    "let g:airline#extensions#tmuxline#enabled = 0 " Use custom theme for tmuxline
    "let g:tmuxline_theme = 'airline'
    "let g:tmuxline_preset = 'full'

    " }}}
endif

" NERDTree {{{

nnoremap <silent> <leader>d :NERDTreeToggle<CR>
nnoremap <silent> <leader>D :NERDTreeFind<CR>
let NERDTreeShowHidden=1
let NERDTreeWinSize=40
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeStatusline = "FILES"

" }}}

" Emmet {{{
"
" }}}

" Surround {{{
"
" cs"'
" cs'<q>
" cst"
" ds"
" S<p class="something">
"
" }}}

" CtrlP {{{
"
" No need to reindex files when reopen CtrlP.
" NOTE: to refresh search list, use <F5>
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_show_hidden = 1

if executable('ag')
  "let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = "ag --hidden --nocolor --ignore .git -l -g '' %s"
endif

" }}}

" }}}
